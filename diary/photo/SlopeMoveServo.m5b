{"category":"SlopeMoveServo","color":"#1e54d2","blocks":["__SlopeMoveServo_SlopeMoveServo"],"jscode":"// Block __SlopeMoveServo_SlopeMoveServo\nvar __SlopeMoveServo_SlopeMoveServo_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"SlopeMoveServo\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Servo\"\n        },\n        {\n            \"type\": \"field_input\",\n            \"text\": \"\",\n            \"spellcheck\": false,\n            \"name\": \"Servo\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"angS\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"angS\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"angE\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"angE\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Ttotal\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"Ttotal\"\n        }\n    ],\n    \"message5\": \"%1 %2\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Tslope\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"Tslope\"\n        }\n    ],\n    \"colour\": \"#1e54d2\"\n};\n\nwindow['Blockly'].Blocks['__SlopeMoveServo_SlopeMoveServo'] = {\n    init: function() {\n        this.jsonInit(__SlopeMoveServo_SlopeMoveServo_json);\n    }\n};\n\nwindow['Blockly'].Python['__SlopeMoveServo_SlopeMoveServo'] = function(block) {\n    var Servo = block.getFieldValue('Servo');\nvar angS = Blockly.Python.valueToCode(block, 'angS', Blockly.Python.ORDER_NONE);\nvar angE = Blockly.Python.valueToCode(block, 'angE', Blockly.Python.ORDER_NONE);\nvar Ttotal = Blockly.Python.valueToCode(block, 'Ttotal', Blockly.Python.ORDER_NONE);\nvar Tslope = Blockly.Python.valueToCode(block, 'Tslope', Blockly.Python.ORDER_NONE);\n    return `t = 0\nTstep = 10\nangD = ${angE} - ${angS}\na = angD / (${Tslope} * (${Ttotal} - ${Tslope}))\nang = 0\nwhile t <= ${Ttotal}:\n  if t < ${Tslope}:\n    # accel\n    ang = ${angS} + a * t * t / 2\n  elif t > (${Ttotal} - ${Tslope}):\n    # break\n    ang = ${angS} - a * (t - ${Ttotal}) * (t - ${Ttotal}) / 2 + angD\n  else:\n    # const v\n    ang = ${angS} + a * ${Tslope} * t - a * ${Tslope} * ${Tslope} / 2\n\n  ${Servo}.write_angle(ang)\n  t = t + Tstep\n  wait_ms(Tstep)\n` + \"\\n\";\n};\n\n","code":{"SlopeMoveServo":["window['Blockly'].Python['__SlopeMoveServo_SlopeMoveServo'] = function(block) {\n    var Servo = block.getFieldValue('Servo');\nvar angS = Blockly.Python.valueToCode(block, 'angS', Blockly.Python.ORDER_NONE);\nvar angE = Blockly.Python.valueToCode(block, 'angE', Blockly.Python.ORDER_NONE);\nvar Ttotal = Blockly.Python.valueToCode(block, 'Ttotal', Blockly.Python.ORDER_NONE);\nvar Tslope = Blockly.Python.valueToCode(block, 'Tslope', Blockly.Python.ORDER_NONE);\n    return `t = 0\nTstep = 10\nangD = ${angE} - ${angS}\na = angD / (${Tslope} * (${Ttotal} - ${Tslope}))\nang = 0\nwhile t <= ${Ttotal}:\n  if t < ${Tslope}:\n    # accel\n    ang = ${angS} + a * t * t / 2\n  elif t > (${Ttotal} - ${Tslope}):\n    # break\n    ang = ${angS} - a * (t - ${Ttotal}) * (t - ${Ttotal}) / 2 + angD\n  else:\n    # const v\n    ang = ${angS} + a * ${Tslope} * t - a * ${Tslope} * ${Tslope} / 2\n\n  ${Servo}.write_angle(ang)\n  t = t + Tstep\n  wait_ms(Tstep)\n` + \"\\n\";\n};\n\n","t = 0\nTstep = 10\nangD = ${angE} - ${angS}\na = angD / (${Tslope} * (${Ttotal} - ${Tslope}))\nang = 0\nwhile t <= ${Ttotal}:\n  if t < ${Tslope}:\n    # accel\n    ang = ${angS} + a * t * t / 2\n  elif t > (${Ttotal} - ${Tslope}):\n    # break\n    ang = ${angS} - a * (t - ${Ttotal}) * (t - ${Ttotal}) / 2 + angD\n  else:\n    # const v\n    ang = ${angS} + a * ${Tslope} * t - a * ${Tslope} * ${Tslope} / 2\n\n  ${Servo}.write_angle(ang)\n  t = t + Tstep\n  wait_ms(Tstep)\n"]}}